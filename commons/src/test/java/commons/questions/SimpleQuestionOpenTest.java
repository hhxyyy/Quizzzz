package commons.questions;

import commons.Activity;
import commons.questions.SimpleQuestionOpen;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertNotNull;


class SimpleQuestionOpenTest {
    String questionText;
    UUID id;
    String path;
    double correctMin;
    double correctMax;
    SimpleQuestionOpen simpleQuestionOpen;
    URL myURL = new URL("http://example.com/");
    Activity act = new Activity("this", "path", "title1", 20, myURL);
    Activity[] activities;

    SimpleQuestionOpenTest() throws MalformedURLException {
    }

    @BeforeEach
    void setup() {
        activities = new Activity[]{act};
        questionText = "About how much energy does " + activities[0].getTitle() + " take?";
        id = UUID.randomUUID();
        path = "path";
        correctMin = 20 * .75;
        correctMax = 20 * 1.25;
        simpleQuestionOpen = new SimpleQuestionOpen(questionText, id, path, correctMin, correctMax);
    }

    @Test
    void testConstructor() {
        assertNotNull(simpleQuestionOpen);
    }

    @Test
    void testGetCorrectMin() {
        assertEquals(correctMin, simpleQuestionOpen.getCorrectMin());
    }

    @Test
    void testGetWrongMin() {
        assertNotEquals(0, simpleQuestionOpen.getCorrectMin());
    }

    @Test
    void testSetCorrectMin() {
        simpleQuestionOpen.setCorrectMin(10);
        assertEquals(10, simpleQuestionOpen.getCorrectMin());
    }

    @Test
    void testGetCorrectMax() {
        assertEquals(correctMax, simpleQuestionOpen.getCorrectMax());
    }

    @Test
    void testGetWrongMax() {
        assertNotEquals(0, simpleQuestionOpen.getCorrectMax());
    }

    @Test
    void testSetCorrectMax() {
        simpleQuestionOpen.setCorrectMax(1000);
        assertEquals(1000, simpleQuestionOpen.getCorrectMax());
    }

    @Test
    void testGetCorrectAnswer() {
        assertEquals(20, simpleQuestionOpen.getPreciseAnswer());
    }

    @Test
    void testGetWrongAnswer() {
        assertNotEquals(37, simpleQuestionOpen.getPreciseAnswer());
    }

    @Test
    void testGetImagePath() {
        assertEquals("path", simpleQuestionOpen.getImage_path());
    }

    @Test
    void testGetWrongImagePath() {
        assertNotEquals("image_path", simpleQuestionOpen.getImage_path());
    }

    @Test
    void testImagePathNotNull() {
        assertNotNull(simpleQuestionOpen.getImage_path());
    }

    @Test
    void testSetImagePath() {
        simpleQuestionOpen.setImage_path("image_path");
        assertEquals("image_path", simpleQuestionOpen.getImage_path());
    }

    @Test
    void testEquals() {
        SimpleQuestionOpen simpleQuestionOpen1 = new SimpleQuestionOpen(questionText, id, path, correctMin, correctMax);
        assertEquals(simpleQuestionOpen, simpleQuestionOpen1);
    }

    @Test
    void testEqualsSameObject() {
        assertEquals(simpleQuestionOpen, simpleQuestionOpen);
    }

    @Test
    void testNotEqualsQuestionText() {
        SimpleQuestionOpen simpleQuestionOpen1 = new SimpleQuestionOpen("Question", id, path, correctMin, correctMax);
        assertNotEquals(simpleQuestionOpen, simpleQuestionOpen1);
    }

    @Test
    void testNotEqualsId() {
        UUID newId = UUID.randomUUID();
        while (newId.equals(id)) {
            newId = UUID.randomUUID();
        }
        SimpleQuestionOpen simpleQuestionOpen1 = new SimpleQuestionOpen(questionText, newId, path, correctMin, correctMax);
        assertNotEquals(simpleQuestionOpen, simpleQuestionOpen1);
    }

    @Test
    void testNotEqualsCorrectMin() {
        SimpleQuestionOpen simpleQuestionOpen1 = new SimpleQuestionOpen(questionText, id, path, 0, correctMax);
        assertNotEquals(simpleQuestionOpen, simpleQuestionOpen1);
    }

    @Test
    void testNotEqualsCorrectMax() {
        SimpleQuestionOpen simpleQuestionOpen1 = new SimpleQuestionOpen(questionText, id, path, correctMin, 0);
        assertNotEquals(simpleQuestionOpen, simpleQuestionOpen1);
    }

    @Test
    void testNotEqualsImagePath() {
        SimpleQuestionOpen simpleQuestionOpen1 =
                new SimpleQuestionOpen(questionText, id, "image_path", correctMin, correctMax);
        assertNotEquals(simpleQuestionOpen, simpleQuestionOpen1);
    }

    @Test
    void testHashCode() {
        SimpleQuestionOpen simpleQuestionOpen1 = new SimpleQuestionOpen(questionText, id, path, correctMin, correctMax);
        assertEquals(simpleQuestionOpen1.hashCode(), (simpleQuestionOpen.hashCode()));
    }

    @Test
    void testHashCodeSameObject() {
        assertEquals(simpleQuestionOpen.hashCode(), simpleQuestionOpen.hashCode());
    }


    @Test
    void testNotEqualsHashCodeQuestionText() {
        SimpleQuestionOpen simpleQuestionOpen1 = new SimpleQuestionOpen("Question", id, path, correctMin, correctMax);
        assertNotEquals(simpleQuestionOpen1.hashCode(), simpleQuestionOpen.hashCode());
    }

    @Test
    void testNotEqualsHashCodeId() {
        UUID newId = UUID.randomUUID();
        while (newId.equals(id)) {
            newId = UUID.randomUUID();
        }
        SimpleQuestionOpen simpleQuestionOpen1 = new SimpleQuestionOpen(questionText, newId, path, correctMin, correctMax);
        assertNotEquals(simpleQuestionOpen1.hashCode(), simpleQuestionOpen.hashCode());
    }

    @Test
    void testNotEqualsHashCodeCorrectMin() {
        SimpleQuestionOpen simpleQuestionOpen1 = new SimpleQuestionOpen(questionText, id, path, 0, correctMax);
        assertNotEquals(simpleQuestionOpen1.hashCode(), simpleQuestionOpen.hashCode());
    }

    @Test
    void testNotEqualsHashCodeCorrectMax() {
        SimpleQuestionOpen simpleQuestionOpen1 = new SimpleQuestionOpen(questionText, id, path, correctMin, 0);
        assertNotEquals(simpleQuestionOpen1.hashCode(), simpleQuestionOpen.hashCode());
    }

    @Test
    void testNotEqualsHashCodeImagePath() {
        SimpleQuestionOpen simpleQuestionOpen1 =
                new SimpleQuestionOpen(questionText, id, "image_path", correctMin, correctMax);
        assertNotEquals(simpleQuestionOpen1.hashCode(), simpleQuestionOpen.hashCode());
    }

    @Test
    void testToString() {
        String expected = simpleQuestionOpen.toString();
        assertTrue(expected.contains("About how much energy does"));
        assertTrue(expected.contains("questionId"));
        assertTrue(expected.contains("15"));
        assertTrue(expected.contains("25"));
    }

    @Test
    void testToStringSameObject() {
        assertEquals(simpleQuestionOpen.toString(), simpleQuestionOpen.toString());
    }
}